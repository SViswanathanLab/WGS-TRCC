#!/bin/bash

mkdir -p /cga/bass/Chunyang/task/Matthew/RPE-1/

RPE1=/cga/bass/Chunyang/task/Matthew/RPE-1
gatk_dir=/home/unix/chengz/VariantCalling

mkdir -p ${RPE1}/tmp/
mkdir -p ${RPE1}/log/


# metadata
use UGER
ish -l h_vmem=1G -binding linear:4 -pe smp 4

mkdir -p ${RPE1}/metadata

## rsync
rsync -L ${trf2CL}/SampleMap.txt ${RPE1}/metadata


RPE1=/cga/bass/Chunyang/task/Matthew/RPE-1
TRCC18=/cga/bass/Chunyang/task/TRCC18


# CNV_analysis
use UGER
ish -l h_vmem=1G -binding linear:15 -pe smp 15

use .bedtools-2.29.0
use R-3.4
export R_LIBS="~/lib"

## CN_plot
### CN_plot_10kb
mkdir -p ${TRCC18}/FinalData/CN_Plot_10kb
find ${TRCC18}/FinalData/CN_Data_10kb -name *.cov.txt | \
 while read f;do
    oid=`basename ${f} | sed 's#\.cov\.txt##g'`
    cn_plot_10kb=${TRCC18}/FinalData/CN_Plot_10kb/${oid}
    cat ${TRCC18}/FinalData/CN_Data_10kb/finalHap.txt |\
     paste - ${f} | \
     awk -F "\t" -v OFS="\t" 'FNR==1{print "CONTIG\tSTART\tEND\tPH1_CN\tPH2_CN"}\
      FNR>1&&($4!="NaN")&&($5!="NaN"){h1=$4*$5;h2=$4*(1-$5);\
       print $1,$2+1,$2+10000,h1*2,h2*2}' > ${cn_plot_10kb}.phased_depth.10kb.tsv
    CN_contour.R -u 1 -l 2 \
     -o ${cn_plot_10kb}.CN_contour.10kb \
     ${cn_plot_10kb}.phased_depth.10kb.tsv &>> ${cn_plot_10kb}.CN_Plot.10kb.log &
    for i in {{1..22},X};do
        ((p=p%14)); ((p++==0)) && wait
        cat ${cn_plot_10kb}.phased_depth.10kb.tsv | \
         awk -F "\t" -v OFS="\t" -v i="chr${i}" 'FNR==1{print}\
          $1==i{sub("^chr","",$1);print}' | \
         cut -f 1-5 > ${cn_plot_10kb}.chr${i}.phased_depth.10kb.tsv && \
        plotCN.R -s ${oid} -g "${i}" \
         --dot_shape "circle filled" --ylab "" \
         --dot_size 1 -m "NA" \
         -d ${RPE1}/references/Homo_sapiens_assembly38.chr0.dict \
         -b ${RPE1}/references/gBands.hg38.head.txt \
         -o ${cn_plot_10kb}.chr${i}.CN_scatter.10kb \
         ${cn_plot_10kb}.chr${i}.phased_depth.10kb.tsv &>> ${cn_plot_10kb}.CN_Plot.10kb.log && \
        CN_contour.R -u 1 -l 2 \
         -o ${cn_plot_10kb}.chr${i}.CN_contour.10kb \
         ${cn_plot_10kb}.chr${i}.phased_depth.10kb.tsv &>> ${cn_plot_10kb}.CN_Plot.10kb.log && \
        rm -f ${cn_plot_10kb}.chr${i}.phased_depth.10kb.tsv &
    done
    wait $!
done
### CN_plot_100kb
mkdir -p ${TRCC18}/FinalData/CN_Plot_100kb
cat ${TRCC18}/FinalData/AllelicCov_100kb/B_TRCC_18_Normal.alleleA.txt | \
 cut -f 1-3 | sed 's#^hs#chr#g' > ${TRCC18}/FinalData/CN_Plot_100kb/TRCC.hg38.100kb.bed
hg38_100kb=${TRCC18}/FinalData/CN_Plot_100kb/TRCC.hg38.100kb.bed
find ${TRCC18}/FinalData/CN_Data_10kb -name *.cov.txt | \
 while read f;do
    oid=`basename ${f} | sed 's#\.cov\.txt##g'`
    cn_plot_10kb=${TRCC18}/FinalData/CN_Plot_10kb/${oid}
    cn_plot_100kb=${TRCC18}/FinalData/CN_Plot_100kb/${oid}
    cat ${cn_plot_10kb}.phased_depth.10kb.tsv | \
     grep -v ^CONTIG | \
     awk -F "\t" -v OFS="\t" '{$2=$2-1;print $0|"sort -k1,1 -k2,2n"}' | \
     bedtools intersect -a stdin \
      -b ${hg38_100kb} -wo | \
     awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG.i\tSTART.i\tEND.i\tPH1_CN\tPH2_CN\tCONTIG\tSTART\tEND\tov"}\
      !a[$1$2$3]++{$7=$7+1;print}' | \
     datatable.R - -e "d[, .(PH1_CN=median(PH1_CN), PH2_CN=median(PH2_CN)), \
      by=.(CONTIG, START, END)]" > ${cn_plot_100kb}.phased_depth.100kb.tsv
    CN_contour.R -u 1 -l 2 \
     -o ${cn_plot_100kb}.CN_contour.100kb \
     ${cn_plot_100kb}.phased_depth.100kb.tsv &>> ${cn_plot_100kb}.CN_Plot.100kb.log &
    for i in {{1..22},X};do
        ((p=p%14)); ((p++==0)) && wait
        cat ${cn_plot_100kb}.phased_depth.100kb.tsv | \
         awk -F "\t" -v OFS="\t" -v i="chr${i}" 'FNR==1{print}\
          $1==i{sub("^chr","",$1);print}' | \
         cut -f 1-5 > ${cn_plot_100kb}.chr${i}.phased_depth.100kb.tsv && \
        plotCN.R -s ${oid} -g "${i}" \
         --dot_shape "circle filled" --ylab "" \
         --dot_size 1 -m "NA" \
         -d ${RPE1}/references/Homo_sapiens_assembly38.chr0.dict \
         -b ${RPE1}/references/gBands.hg38.head.txt \
         -o ${cn_plot_100kb}.chr${i}.CN_scatter.100kb \
         ${cn_plot_100kb}.chr${i}.phased_depth.100kb.tsv &>> ${cn_plot_100kb}.CN_Plot.100kb.log && \
        CN_contour.R -u 1 -l 2 \
         -o ${cn_plot_100kb}.chr${i}.CN_contour.100kb \
         ${cn_plot_100kb}.chr${i}.phased_depth.100kb.tsv &>> ${cn_plot_100kb}.CN_Plot.100kb.log && \
        rm -f ${cn_plot_100kb}.chr${i}.phased_depth.100kb.tsv &
    done
    wait $!
done
### CN_plot_100kb
TRCC18=/czlab/cbao/TRCC18 # on DS server
mkdir -p ${TRCC18}/FinalData/CN_density_100kb
find ${TRCC18}/FinalData/phased_depth_100kb/ -name *.phased_depth.100kb.tsv | \
 sed 's#.*\/##g;s#.phased_depth\.100kb\.tsv$##g' | \
 while read oid;do
    phased_depth_100kb=${TRCC18}/FinalData/phased_depth_100kb/${oid}
    phased_depth_density_100kb=${TRCC18}/FinalData/CN_density_100kb/${oid}
    CN_density.R \
     --x_range '0,2' --y_range '0,40' \
     -o ${phased_depth_density_100kb}.density.100kb \
     ${phased_depth_100kb}.phased_depth.100kb.tsv &>> ${phased_depth_density_100kb}.density.100kb.log &
    wait $!
done


# Mutect2 joint
mkdir -p /czlab/cbao/TRCC/Mutect2_joint
## parameters
### BAM files
TRCC18_bams=/czlab/DFCI_Data/TranslocationKidneyCancer/TRCC18/bamlinks
### scatter_intervals
scatter_intervals=/czlab/References/GRCh38/hg38_scatter_300
### References
ref="-R /czlab/References/GRCh38/hg38_primary.fa"
gnomad="--germline-resource /czlab/cbao/ref/hg38/af-only-gnomad.hg38.vcf.gz"
pon="-pon /czlab/cbao/ref/hg38/M2PoN_4.0_WGS_for_public.vcf"
m2_extra_args="--downsampling-stride 20 --max-reads-per-alignment-start 6 --max-suspicious-reads-per-alignment-start 6"
### GATK4 M2 filters
GATK4_standard_filter="--read-filter PassesVendorQualityCheckReadFilter --read-filter HasReadGroupReadFilter \
 --read-filter NotDuplicateReadFilter --read-filter MappingQualityAvailableReadFilter"
GATK4_M2_filter="--read-filter MappingQualityReadFilter --minimum-mapping-quality 30 --read-filter OverclippedReadFilter --filter-too-short 25 --read-filter GoodCigarReadFilter --read-filter AmbiguousBaseReadFilter "
GATK4_M2_threads="--native-pair-hmm-threads 2 --seconds-between-progress-updates 100"
### GATK4 parameters
GATK="java -Xmx16g -jar /homes9/cbao/tools/gatk-4.3.0.0/gatk-package-4.3.0.0-local.jar Mutect2"
GATK_M2="${GATK} ${ref} ${gnomad} ${pon} ${GATK4_M2_threads} ${GATK4_standard_filter} ${GATK4_M2_filter}"

## Mutect2 joint calling
M2j=/czlab/cbao/TRCC/Mutect2_joint
### prepare scripts
#cat sample_list.tsv | \
# awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    participant_id=TRCC18
    mkdir -p ${M2j}/${participant_id}/hg38_scatter_300
    mkdir -p ${M2j}/${participant_id}/temp
    > ${M2j}/${participant_id}/${participant_id}.M2_joint.s300.sh
    M2_temp="--tmp-dir ${M2j}/${participant_id}/temp"
    M2_bams=`find ${TRCC18_bams} -name *.bam`
    M2_input=`echo ${M2_bams} | sed 's# # -I #g;s#^#-I #g'`
    M2_normal="-normal B_TRCC_18_Normal"
    M2_I="${M2_input} ${M2_normal}"
    for interval in ${scatter_intervals}/*.interval_list;do
        M2_id=`basename ${interval} | sed 's#.interval_list##'`
        M2_prefix=${M2j}/${participant_id}/hg38_scatter_300/${participant_id}.M2_joint
        M2_vcf="-O ${M2_prefix}.${M2_id}.vcf.gz"
        M2_bam="--bam-output ${M2_prefix}.${M2_id}.bam"
        M2_ob="--f1r2-tar-gz ${M2_prefix}.${M2_id}.f1r2.tar.gz"
        M2_O="${M2_vcf} ${M2_bam} ${M2_ob} ${m2_extra_args}"
        M2_log="1> ${M2_prefix}.${M2_id}.stdout.log 2> ${M2_prefix}.${M2_id}.stderr.log"
        M2_exit="tail -1 ${M2_prefix}.${M2_id}.stdout.log > ${M2_prefix}.${M2_id}.exit_status.log"
        echo "${GATK_M2} ${M2_temp} ${M2_I} -L ${interval} ${M2_O} ${M2_log} && ${M2_exit}" | \
        sort >> ${M2j}/${participant_id}/${participant_id}.M2_joint.s300.sh
    done
#done
### submit scripts
sbatch ${M2j}/${participant_id}/TRCC18.M2_joint.sbatch
### check integrity
find ${scatter_intervals} -type f | sort > ${M2_prefix}.all.interval_list
#cat sample_list.tsv | \
# awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    MDY=$(date +"%m-%d-%Y"_%H)
    # list of stdour containing the signal of 'SUCCESS'
    M2_prefix=${M2j}/${participant_id}/hg38_scatter_300/${participant_id}.M2_joint
    find ${M2j}/${participant_id}/hg38_scatter_300/ \
      -name *stdout.log -exec grep -H "SUCCESS" {} \; | \
     sed "s#.*\.interval_#interval_#g;s#\.stdout\..*\$##g" | \
     fgrep -f - ${M2_prefix}.all.interval_list | \
     sort > ${M2_prefix}.${MDY}_succeed.interval_list
    # compare with the original list
    find ${M2j}/${participant_id}/hg38_scatter_300/ \
      -name *stdout.log -exec grep -H "SUCCESS" {} \; | \
     sed "s#.*\.interval_#interval_#g;s#\.stdout\..*\$##g" | \
     fgrep -vf - ${M2_prefix}.all.interval_list | \
     sort > ${M2_prefix}.${MDY}_failed.interval_list
#done
### prepare scripts for failed jobs
M2_prefix=${M2j}/${participant_id}/hg38_scatter_300/${participant_id}.M2_joint
#cat sample_list.tsv | \
# awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    participant_id=TRCC18
    > ${M2j}/${participant_id}/${participant_id}.M2_joint.s300.${MDY}.sh
    M2_temp="--tmp-dir ${M2j}/${participant_id}/temp"
    M2_bams=`find ${TRCC18_bams} -name *.bam`
    M2_input=`echo ${M2_bams} | sed 's# # -I #g;s#^#-I #g'`
    M2_normal="-normal B_TRCC_18_Normal"
    M2_I="${M2_input} ${M2_normal}"
    cat ${M2_prefix}.${MDY}_failed.interval_list | \
     while read interval;do
        M2_id=`basename ${interval} | sed 's#.interval_list##'`
        M2_prefix=${M2j}/${participant_id}/hg38_scatter_300/${participant_id}.M2_joint
        M2_vcf="-O ${M2_prefix}.${M2_id}.vcf.gz"
        M2_bam="--bam-output ${M2_prefix}.${M2_id}.bam"
        M2_ob="--f1r2-tar-gz ${M2_prefix}.${M2_id}.f1r2.tar.gz"
        M2_O="${M2_vcf} ${M2_bam} ${M2_ob} ${m2_extra_args}"
        M2_log="1> ${M2_prefix}.${M2_id}.stdout.log 2> ${M2_prefix}.${M2_id}.stderr.log"
        M2_exit="tail -1 ${M2_prefix}.${M2_id}.stdout.log > ${M2_prefix}.${M2_id}.exit_status.log"
        echo "${GATK_M2} ${M2_temp} ${M2_I} -L ${interval} ${M2_O} ${M2_log} && ${M2_exit}" | \
        sort >> ${M2j}/${participant_id}/${participant_id}.M2_joint.s300.${MDY}.sh
    done
#done
sbatch ${M2j}/${participant_id}/TRCC18.M2_joint.${MDY}.sbatch
### merge M2_joint vcf
mkdir -p ${M2j}/${participant_id}/merged_files
#cat sample_list.tsv | \
# awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    # prefix
    M2_prefix=${M2j}/${participant_id}/merged_files/${participant_id}.M2_joint
    # MergeVcfs
    find ${M2j}/${participant_id}/*/ \
     -regex .*\.M2_joint\..*\.vcf\.gz$ | \
     sort > ${M2_prefix}.unfiltered.vcf.list
    srun --cpus-per-task=4 --mem-per-cpu=16G \
     gatk --java-options '-Xmx64g' MergeVcfs \
     --TMP_DIR ${M2j}/${participant_id}/temp \
     -I ${M2_prefix}.unfiltered.vcf.list \
     -O ${M2_prefix}.unfiltered.vcf.gz &> ${M2_prefix}.MergeVcfs.stderr.log &
    # GatherBamFiles
    find ${M2j}/${participant_id}/*/ \
     -regex .*\.M2_joint\..*\.bam$ | \
     sort > ${M2_prefix}.bam.list
    nohup gatk --java-options '-Xmx16g' GatherBamFiles \
     --TMP_DIR ${M2j}/${participant_id}/temp \
     -I ${M2_prefix}.bam.list \
     -O ${M2_prefix}.unsorted.bam &> ${M2_prefix}.GatherBamFiles.stderr.log &
    nohup gatk --java-options '-Xmx16g' SortSam \
     --TMP_DIR ${M2j}/${participant_id}/temp \
     -I ${M2_prefix}.unsorted.bam \
     -O ${M2_prefix}.merged.bam \
     --SORT_ORDER coordinate -VALIDATION_STRINGENCY LENIENT &> ${M2_prefix}.SortSam.stderr.log &
    nohup gatk --java-options '-Xmx8g' BuildBamIndex \
     -I ${M2_prefix}.merged.bam \
     -O ${M2_prefix}.merged.bai \
     -VALIDATION_STRINGENCY LENIENT &> ${M2_prefix}.BuildBamIndex.stderr.log &
    # LearnReadOrientationModel
    M2_ob=`find ${M2j}/${participant_id}/*/ -regex .*\.M2_joint\..*\.f1r2\.tar\.gz$`
    LROM_input=`echo ${M2_ob} | sed 's# # -I #g;s#^#-I #g;'`
    srun  --cpus-per-task=4 --mem-per-cpu=16G \
     gatk --java-options '-Xmx64g' LearnReadOrientationModel \
     --tmp-dir ${M2j}/${participant_id}/temp \
     ${LROM_input} \
     -O ${M2_prefix}.artifact-priors.tar.gz &> ${M2_prefix}.LearnReadOrientationModel.stderr.log &
    # MergeMutectStats
    M2_stats=`find ${M2j}/${participant_id}/*/ -regex .*\.M2_joint\..*\.vcf\.gz\.stats$`
    MMS_input=`echo ${M2_stats} | sed 's# # -stats #g;s#^#-stats #g;'`
    srun --cpus-per-task=4 --mem-per-cpu=16G \
     gatk --java-options '-Xmx64g' MergeMutectStats \
     ${MMS_input} \
     -O ${M2_prefix}.merged.stats &> ${M2_prefix}.MergeMutectStats.stderr.log &
#done

## Mutect2 filtering
### GetPileupSummaries
mkdir -p ${M2j}/${participant_id}/variants_for_contamination
variants_for_contamination=/czlab/cbao/ref/hg38/mutect2-contamination-variants.hg38_primary.vcf.gz
ref="-R /czlab/References/GRCh38/hg38_primary.fa"
TRCC18_bams=/czlab/DFCI_Data/TranslocationKidneyCancer/TRCC18/bamlinks
find ${TRCC18_bams} -name *.bam | \
 while read bam;do
    s=`echo ${bam} | sed "s#.*/##g;s#${participant_id}\.##g;s#\.bam##g"`
    Pileup_prefix=${M2j}/${participant_id}/variants_for_contamination/${participant_id}.${s}
    nohup gatk --java-options '-Xmx16g' GetPileupSummaries \
     ${ref} -I ${bam} \
     -V ${variants_for_contamination} \
     -L ${variants_for_contamination} \
     -O ${Pileup_prefix}.tumor-pileups.table 1> ${Pileup_prefix}.stdout.log 2> ${Pileup_prefix}.stderr.log &
done
### CalculateContamination
mkdir -p ${M2j}/${participant_id}/CalculateContamination
TRCC18_bams=/czlab/DFCI_Data/TranslocationKidneyCancer/TRCC18/bamlinks
normal_pileups=/czlab/cbao/TRCC/Mutect2_joint/TRCC18/variants_for_contamination/TRCC18.Normal.tumor-pileups.table
find ${TRCC18_bams} -name *.bam | grep -v TRCC18.Normal.bam | \
 while read bam;do
    s=`echo ${bam} | sed "s#.*/##g;s#${participant_id}\.##g;s#\.bam##g"`
    Pileup_prefix=${M2j}/${participant_id}/variants_for_contamination/${participant_id}.${s}
    Cont_prefix=${M2j}/${participant_id}/CalculateContamination/${participant_id}.${s}
    nohup gatk --java-options '-Xmx16g' CalculateContamination \
     -I ${Pileup_prefix}.tumor-pileups.table \
     -matched ${normal_pileups} \
     --tumor-segmentation ${Cont_prefix}.segments.table \
     -O ${Cont_prefix}.contamination.table 1> ${Cont_prefix}.stdout.log 2>${Cont_prefix}.stderr.log &
done
### FilterMutectCalls
mkdir -p ${M2j}/${participant_id}/FilterMutectCalls
merged_prefix=${M2j}/${participant_id}/merged_files/${participant_id}.M2_joint
filtered_prefix=${M2j}/${participant_id}/FilterMutectCalls/${participant_id}.M2_joint
ref="-R /czlab/References/GRCh38/hg38_primary.fa"
intervals="-L /czlab/cbao/ref/hg38/wgs_metrics_intervals.interval_list"
cont=`find ${M2j}/${participant_id}/CalculateContamination -name *.contamination.table`
cont_input=`echo ${cont} | sed 's# # --contamination-table #g;s#^#--contamination-table #g'`
seg=`find ${M2j}/${participant_id}/CalculateContamination -name *.segments.table`
seg_input=`echo ${seg} | sed 's# # --tumor-segmentation #g;s#^#--tumor-segmentation #g'`
srun  --cpus-per-task=4 --mem-per-cpu=16G \
 gatk --java-options '-Xmx64g' FilterMutectCalls \
    --tmp-dir ${M2j}/${participant_id}/temp \
    ${ref} \
    -V ${merged_prefix}.unfiltered.vcf.gz \
    ${cont_input} ${seg_input} \
    --ob-priors ${merged_prefix}.artifact-priors.tar.gz \
    -stats ${merged_prefix}.merged.stats \
    --filtering-stats ${filtered_prefix}.filtering.stats \
    -O ${filtered_prefix}.filtered_all.vcf.gz &> ${filtered_prefix}.filtered.stderr.log &
srun  --cpus-per-task=4 --mem-per-cpu=16G \
 gatk --java-options '-Xmx64g' SelectVariants \
    --tmp-dir ${M2j}/${participant_id}/temp \
    ${ref} ${intervals} \
    -V ${filtered_prefix}.filtered_all.vcf.gz \
    -O ${filtered_prefix}.filtered.vcf.gz \
    --exclude-filtered &>> ${filtered_prefix}.filtered.stderr.log &
### FilterAlignmentArtifacts
realignment_index_bundle=/czlab/cbao/ref/hg38/Homo_sapiens_assembly38.index_bundle
srun  --cpus-per-task=4 --mem-per-cpu=16G \
 gatk --java-options '-Xmx64g' FilterAlignmentArtifacts \
    --tmp-dir ${M2j}/${participant_id}/temp \
    ${ref} \
    -V ${filtered_prefix}.filtered.vcf.gz \
    -I ${merged_prefix}.merged.bam \
    --bwa-mem-index-image ${realignment_index_bundle} \
    -O ${filtered_prefix}.realigned.vcf.gz &> ${filtered_prefix}.realigned.stderr.log &
 gatk --java-options '-Xmx64g' SelectVariants \
    --tmp-dir ${M2j}/${participant_id}/temp \
    ${ref} \
    -XL /czlab/cbao/ref/hg38/cytoBand_acen.hg38.interval_list \
    -V ${filtered_prefix}.realigned.vcf.gz \
    -O ${filtered_prefix}.final.vcf.gz \
    --exclude-filtered &>> ${filtered_prefix}.realigned.stderr.log &


# HaplotypeCaller
mkdir -p /czlab/cbao/TRCC/HaplotypeCaller
HC=/czlab/cbao/TRCC/HaplotypeCaller
M2j=/czlab/cbao/TRCC/Mutect2_joint

## FilterHCCalls
### extract intersection of M2 and HC
participant_id=TRCC18
mkdir -p ${HC}/${participant_id}/FilterHCCalls/
bcftools view -R ${HC}/${participant_id}/FilterHCCalls/somaticVars.vcf.gz \
 ${M2j}/${participant_id}/FilterMutectCalls/${participant_id}.M2_joint.final.vcf.gz \
 -Oz > ${HC}/${participant_id}/FilterHCCalls/${participant_id}.HC_M2.filtered.vcf.gz
bcftools index ${HC}/${participant_id}/FilterHCCalls/${participant_id}.HC_M2.filtered.vcf.gz
### filter
### extract blacklisted SNPs
zcat ${HC}/${participant_id}/FilterHCCalls/${participant_id}.HC_M2.filtered.vcf.gz | \
 bcftools view -f 'PASS,.' -m2 -M2 -v snps | \
 bcftools view -e 'COUNT(GT="0/0")+COUNT(GT="./.")=N_SAMPLES' | \
 bcftools view -e 'COUNT(GT="./.")>0' | \
 bcftools view -Oz > ${HC}/${participant_id}/FilterHCCalls/${participant_id}.HC_M2.final.vcf.gz
bcftools index -t ${HC}/${participant_id}/FilterHCCalls/${participant_id}.HC_M2.final.vcf.gz


# Funcotator
HC=/czlab/cbao/TRCC/HaplotypeCaller
participant_id=TRCC18
FilterHCCalls=${HC}/${participant_id}/FilterHCCalls/${participant_id}.HC_M2.final
## MakeSitesOnlyVcf
gatk --java-options '-Xmx16g' MakeSitesOnlyVcf \
    INPUT=${FilterHCCalls}.vcf.gz \
    OUTPUT=${FilterHCCalls}.sites.vcf.gz &> ${FilterHCCalls}.sites.stderr.log &
### extract intersection of M2 and HC
nohup srun --cpus-per-task=4 --mem-per-cpu=16G \
gatk --java-options '-Xmx16g' Funcotator \
    --data-sources-path /czlab/cbao/ref/hg38/Funcotator/funcotator_dataSources_v1p7 \
    --ref-version hg38 \
    --output-file-format MAF \
    -R /czlab/References/GRCh38/hg38_primary.fa \
    -V ${FilterHCCalls}.sites.vcf.gz \
    -O ${FilterHCCalls}.sites.maf \
    --annotation-default normal_barcode:${participant_id}_Normal \
    --annotation-default tumor_barcode:${participant_id}_Tumor \
    --annotation-default Center:broad.mit.edu &> ${FilterHCCalls}.Funcotator.stderr.log &


# Funcotator
HC=/czlab/cbao/TRCC/HaplotypeCaller
participant_id=TRCC18
Filtered_vcfs=${HC}/${participant_id}/FilterHCCalls/${participant_id}.HC_M2.filtered
## MakeSitesOnlyVcf
gatk --java-options '-Xmx16g' MakeSitesOnlyVcf \
    INPUT=${Filtered_vcfs}.vcf.gz \
    OUTPUT=${Filtered_vcfs}.sites.vcf.gz &> ${Filtered_vcfs}.sites.stderr.log &
### extract intersection of M2 and HC
nohup srun --cpus-per-task=4 --mem-per-cpu=16G \
gatk --java-options '-Xmx16g' Funcotator \
    --data-sources-path /czlab/cbao/ref/hg38/Funcotator/funcotator_dataSources_v1p7 \
    --ref-version hg38 \
    --output-file-format MAF \
    -R /czlab/References/GRCh38/hg38_primary.fa \
    -V ${Filtered_vcfs}.sites.vcf.gz \
    -O ${Filtered_vcfs}.sites.maf \
    --annotation-default normal_barcode:${participant_id}_Normal \
    --annotation-default tumor_barcode:${participant_id}_Tumor \
    --annotation-default Center:broad.mit.edu &> ${Filtered_vcfs}.Funcotator.stderr.log &


